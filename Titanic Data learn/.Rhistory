install.packages(c("xlsx", "dplyr", "beanplot"))
install.packages("manipulate")
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags [, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
library("swirl", lib.loc="~/R/win-library/3.2")
swirl()
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, lapply)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
library(swirl)
install_from_swirl("Data Analysis")
swirl()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
mode(myMPG)
freq(myMPG)
frequency(myMPG)
count(myMPG)
swirl()
range(cars$prince)
range(cars$price)
min(cars$price)
71.9-7.4
61.9-7.4
var(cars$price)
sd(cars$price)
15
10
10
12
11
14
15
15
9
8
7
6
5
4
3
2
1
12
11
10
14
15
16
?sampe
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = T)
flips <- sample(c(0,1), 100, replace = T, prob = (0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = (0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
install.packages("machinelearning")
install.packages("machinelearning")
install.packages(c("ahaz", "arules", "BayesTree", "bigrf", "bigRR", "bmrm", "Boruta", "bst", "C50", "caret", "CORElearn", "CoxBoost", "Cubist", "e1071", "(core)", "earth", "elasticnet", "ElemStatLearn", "evtree", "FCNN4R", "frbs", "GAMBoost", "gamboostLSS", "gbm", "(core)", "glmnet", "glmpath", "GMMBoost", "grplasso", "grpreg", "hda", "hdi", "ipred", "kernlab", "(core)", "klaR", "lars", "lasso2", "LiblineaR", "LogicForest", "LogicReg", "maptree", "mboost", "(core)", "mlr", "ncvreg", "nnet", "(core)", "oblique.tree", "pamr", "party", "partykit", "penalized", "penalizedLDA", "penalizedSVM", "quantregForest", "randomForest", "(core)", "randomForestSRC", "rattle", "rda", "rdetools", "REEMtree", "relaxo", "rgenoud", "rgp", "Rmalschains", "rminer", "ROCR", "RoughSets", "rpart", "(core)", "RPMM", "RSNNS", "RWeka", "RXshrink", "sda", "stabs", "svmpath", "tgp", "tree", "varSelRF", "vcrpart"))
install.packages("magrittr")
install.packages("dplyr")
install.packages("RWeka")
install.packages("xlsx")
install.packages("RODBC")
install.packages("sem")
library(sem)
install.packages("semplot")
install.packages("semPlot")
library(sem)
library(Hmisc)
library(reshape2)
library(psych)
library(plyr)
library(dplyr)
##Used for both regular normality and multivariate normality tests
library(MVN)
library(mvoutlier)
##for reverse coding
library(car)
installedpackages()
installed.packages()
library("car");library("psych");library("doBy");library("Hmisc");library("plotrix");library("car");library("ez") ;library("WRS2") ;library("pastecs");library("nlme") ;library("ggplot2");library("reshape2")
install.packages("afex")
library("afex");library("psych");library("doBy");library("Hmisc");library("plotrix");library("car");library("ez") ;library("WRS2") ;library("pastecs");library("nlme") ;library("ggplot2");library("reshape2")
library("caret", lib.loc="~/R/win-library/3.2")
library(caret); library(randomForest);
install.packages(c("afex", "arules", "BayesTree", "BH", "Boruta", "bst", "car", "caret", "checkmate", "coda", "coin", "CORElearn", "curl", "DEoptimR", "DiagrammeR", "digest", "doBy", "doParallel", "dplyr", "earth", "evaluate", "FCNN4R", "foreach", "formatR", "gamboostLSS", "GGally", "ggplot2", "glmnet", "gplots", "gridExtra", "gtable", "hda", "hdi", "Hmisc", "htmltools", "htmlwidgets", "httr", "irlba", "iterators", "jsonlite", "kernlab", "kknn", "latticeExtra", "lava", "lavaan", "lhs", "lme4", "lpSolve", "lsmeans", "mboost", "mda", "memoise", "mime", "mlr", "mnormt", "multcomp", "munsell", "mvtnorm", "ncvreg", "nnet", "packrat", "ParamHelpers", "party", "partykit", "prodlim", "qgraph", "quantreg", "quantregForest", "R6", "randomForest", "randomForestSRC", "ranger", "rattle", "Rcpp", "RcppEigen", "RCurl", "rFerns", "rJava", "rmarkdown", "robCompositions", "rockchalk", "RODBC", "RoughSets", "rrcov", "rsconnect", "rstudioapi", "RWeka", "RWekajars", "sandwich", "scales", "sem", "sgeostat", "shiny", "statmod", "stringi", "swirl", "TeachingDemos", "testthat", "tgp", "TH.data", "tree", "vcrpart", "visNetwork", "XML", "xtable"))
setwd("~/")
setwd("~/Titanic Data learn")
trainset <- read.csv("test.csv")
testset <- read.csv("train.csv")
View(trainset)
View(trainset)
trainset <- read.csv("train.csv")
testset <- read.csv("test.csv")
View(testset)
View(trainset)
View(trainset)
table(trainset[c("Survived, Sex")])
table(trainset[ c("Survived, Sex")])
View(trainset)
head(testset)
head(trainset)
table(trainset[ c("Survived", Sex")])
table(trainset[ c("Survived", "Sex")])
table(trainset[ ,c("Survived", "Sex")])
table(trainset[ ,c("Survived", "Sex", "Age")])
table(trainset[ ,c("Survived",  "Age")])
